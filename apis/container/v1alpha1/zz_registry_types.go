// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegistryInitParameters struct {

	// The name of the container_registry
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The slug identifier for the subscription tier to use (starter, basic, or professional)
	SubscriptionTierSlug *string `json:"subscriptionTierSlug,omitempty" tf:"subscription_tier_slug,omitempty"`
}

type RegistryObservation struct {

	// The date and time when the registry was created
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The URL endpoint of the container registry. Ex: registry.digitalocean.com/my_registry
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// The id of the container registry
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the container_registry
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The domain of the container registry. Ex: registry.digitalocean.com
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// The amount of storage used in the registry in bytes.
	StorageUsageBytes *float64 `json:"storageUsageBytes,omitempty" tf:"storage_usage_bytes,omitempty"`

	// The slug identifier for the subscription tier to use (starter, basic, or professional)
	SubscriptionTierSlug *string `json:"subscriptionTierSlug,omitempty" tf:"subscription_tier_slug,omitempty"`
}

type RegistryParameters struct {

	// The name of the container_registry
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The slug identifier for the subscription tier to use (starter, basic, or professional)
	// +kubebuilder:validation:Optional
	SubscriptionTierSlug *string `json:"subscriptionTierSlug,omitempty" tf:"subscription_tier_slug,omitempty"`
}

// RegistrySpec defines the desired state of Registry
type RegistrySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RegistryInitParameters `json:"initProvider,omitempty"`
}

// RegistryStatus defines the observed state of Registry.
type RegistryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Registry is the Schema for the Registrys API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Registry struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.subscriptionTierSlug) || (has(self.initProvider) && has(self.initProvider.subscriptionTierSlug))",message="spec.forProvider.subscriptionTierSlug is a required parameter"
	Spec   RegistrySpec   `json:"spec"`
	Status RegistryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryList contains a list of Registrys
type RegistryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Registry `json:"items"`
}

// Repository type metadata.
var (
	Registry_Kind             = "Registry"
	Registry_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Registry_Kind}.String()
	Registry_KindAPIVersion   = Registry_Kind + "." + CRDGroupVersion.String()
	Registry_GroupVersionKind = CRDGroupVersion.WithKind(Registry_Kind)
)

func init() {
	SchemeBuilder.Register(&Registry{}, &RegistryList{})
}
