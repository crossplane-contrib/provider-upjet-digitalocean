/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageInitParameters struct {

	// An optional description for the image.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An optional distribution name for the image. Valid values are documented here
	Distribution *string `json:"distribution,omitempty" tf:"distribution,omitempty"`

	// A name for the Custom Image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of regions. (Currently only one is supported).
	// +listType=set
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// A list of optional tags for the image.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A URL from which the custom Linux virtual machine image may be retrieved.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ImageObservation struct {

	// A time value given in ISO8601 combined date and time format that represents when the image was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// An optional description for the image.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An optional distribution name for the image. Valid values are documented here
	Distribution *string `json:"distribution,omitempty" tf:"distribution,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique number that can be used to identify and reference a specific image.
	ImageID *float64 `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The minimum disk size in GB required for a Droplet to use this image.
	MinDiskSize *float64 `json:"minDiskSize,omitempty" tf:"min_disk_size,omitempty"`

	// A name for the Custom Image.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Indicates whether the image in question is public or not.
	Public *bool `json:"public,omitempty" tf:"public,omitempty"`

	// A list of regions. (Currently only one is supported).
	// +listType=set
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// The size of the image in gigabytes.
	SizeGigabytes *float64 `json:"sizeGigabytes,omitempty" tf:"size_gigabytes,omitempty"`

	// A uniquely identifying string for each image.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// A status string indicating the state of a custom image.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// A list of optional tags for the image.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Describes the kind of image.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// A URL from which the custom Linux virtual machine image may be retrieved.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ImageParameters struct {

	// An optional description for the image.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// An optional distribution name for the image. Valid values are documented here
	// +kubebuilder:validation:Optional
	Distribution *string `json:"distribution,omitempty" tf:"distribution,omitempty"`

	// A name for the Custom Image.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of regions. (Currently only one is supported).
	// +kubebuilder:validation:Optional
	// +listType=set
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// A list of optional tags for the image.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A URL from which the custom Linux virtual machine image may be retrieved.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageInitParameters `json:"initProvider,omitempty"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Image is the Schema for the Images API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.regions) || (has(self.initProvider) && has(self.initProvider.regions))",message="spec.forProvider.regions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.url) || (has(self.initProvider) && has(self.initProvider.url))",message="spec.forProvider.url is a required parameter"
	Spec   ImageSpec   `json:"spec"`
	Status ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
