/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupRestoreInitParameters struct {

	// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
	BackupCreatedAt *string `json:"backupCreatedAt,omitempty" tf:"backup_created_at,omitempty"`

	// The name of an existing database cluster from which the backup will be restored.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type BackupRestoreObservation struct {

	// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
	BackupCreatedAt *string `json:"backupCreatedAt,omitempty" tf:"backup_created_at,omitempty"`

	// The name of an existing database cluster from which the backup will be restored.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type BackupRestoreParameters struct {

	// The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
	// +kubebuilder:validation:Optional
	BackupCreatedAt *string `json:"backupCreatedAt,omitempty" tf:"backup_created_at,omitempty"`

	// The name of an existing database cluster from which the backup will be restored.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`
}

type ClusterInitParameters struct {

	// Create a new database cluster based on a backup of an existing cluster.
	BackupRestore []BackupRestoreInitParameters `json:"backupRestore,omitempty" tf:"backup_restore,omitempty"`

	// Database engine used by the cluster (ex. pg for PostreSQL, mysql for MySQL, redis for Redis, mongodb for MongoDB, or kafka for Kafka).
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// A string specifying the eviction policy for a Redis cluster. Valid values are: noeviction, allkeys_lru, allkeys_random, volatile_lru, volatile_random, or volatile_ttl.
	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy,omitempty"`

	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindow []MaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// The name of the database cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of nodes that will be included in the cluster. For kafka clusters, this must be 3.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The ID of the VPC where the database cluster will be located.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/vpc/v1alpha1.VPC
	PrivateNetworkUUID *string `json:"privateNetworkUuid,omitempty" tf:"private_network_uuid,omitempty"`

	// Reference to a VPC in vpc to populate privateNetworkUuid.
	// +kubebuilder:validation:Optional
	PrivateNetworkUUIDRef *v1.Reference `json:"privateNetworkUuidRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate privateNetworkUuid.
	// +kubebuilder:validation:Optional
	PrivateNetworkUUIDSelector *v1.Selector `json:"privateNetworkUuidSelector,omitempty" tf:"-"`

	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/project/v1alpha1.Project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// DigitalOcean region where the cluster will reside.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// Database Droplet size associated with the cluster (ex. db-s-1vcpu-1gb). See here for a list of valid size slugs.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib *string `json:"storageSizeMib,omitempty" tf:"storage_size_mib,omitempty"`

	// A list of tag names to be applied to the database cluster.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Engine version used by the cluster (ex. 14 for PostgreSQL 14).
	// When this value is changed, a call to the Upgrade major Version for a Database API operation is made with the new version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ClusterObservation struct {

	// Create a new database cluster based on a backup of an existing cluster.
	BackupRestore []BackupRestoreObservation `json:"backupRestore,omitempty" tf:"backup_restore,omitempty"`

	// Name of the cluster's default database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Database engine used by the cluster (ex. pg for PostreSQL, mysql for MySQL, redis for Redis, mongodb for MongoDB, or kafka for Kafka).
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// A string specifying the eviction policy for a Redis cluster. Valid values are: noeviction, allkeys_lru, allkeys_random, volatile_lru, volatile_random, or volatile_ttl.
	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy,omitempty"`

	// Database cluster's hostname.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The ID of the database cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindow []MaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// The name of the database cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of nodes that will be included in the cluster. For kafka clusters, this must be 3.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// Network port that the database cluster is listening on.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Same as host, but only accessible from resources within the account and in the same region.
	PrivateHost *string `json:"privateHost,omitempty" tf:"private_host,omitempty"`

	// The ID of the VPC where the database cluster will be located.
	PrivateNetworkUUID *string `json:"privateNetworkUuid,omitempty" tf:"private_network_uuid,omitempty"`

	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// DigitalOcean region where the cluster will reside.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// Database Droplet size associated with the cluster (ex. db-s-1vcpu-1gb). See here for a list of valid size slugs.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib *string `json:"storageSizeMib,omitempty" tf:"storage_size_mib,omitempty"`

	// A list of tag names to be applied to the database cluster.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Name of the OpenSearch dashboard db.
	UIDatabase *string `json:"uiDatabase,omitempty" tf:"ui_database,omitempty"`

	// Hostname for the OpenSearch dashboard.
	UIHost *string `json:"uiHost,omitempty" tf:"ui_host,omitempty"`

	// Network port that the OpenSearch dashboard is listening on.
	UIPort *float64 `json:"uiPort,omitempty" tf:"ui_port,omitempty"`

	// Username for OpenSearch dashboard's default user.
	UIUser *string `json:"uiUser,omitempty" tf:"ui_user,omitempty"`

	// The uniform resource name of the database cluster.
	Urn *string `json:"urn,omitempty" tf:"urn,omitempty"`

	// Username for the cluster's default user.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Engine version used by the cluster (ex. 14 for PostgreSQL 14).
	// When this value is changed, a call to the Upgrade major Version for a Database API operation is made with the new version.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ClusterParameters struct {

	// Create a new database cluster based on a backup of an existing cluster.
	// +kubebuilder:validation:Optional
	BackupRestore []BackupRestoreParameters `json:"backupRestore,omitempty" tf:"backup_restore,omitempty"`

	// Database engine used by the cluster (ex. pg for PostreSQL, mysql for MySQL, redis for Redis, mongodb for MongoDB, or kafka for Kafka).
	// +kubebuilder:validation:Optional
	Engine *string `json:"engine,omitempty" tf:"engine,omitempty"`

	// A string specifying the eviction policy for a Redis cluster. Valid values are: noeviction, allkeys_lru, allkeys_random, volatile_lru, volatile_random, or volatile_ttl.
	// +kubebuilder:validation:Optional
	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy,omitempty"`

	// Defines when the automatic maintenance should be performed for the database cluster.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []MaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// The name of the database cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Number of nodes that will be included in the cluster. For kafka clusters, this must be 3.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The ID of the VPC where the database cluster will be located.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	PrivateNetworkUUID *string `json:"privateNetworkUuid,omitempty" tf:"private_network_uuid,omitempty"`

	// Reference to a VPC in vpc to populate privateNetworkUuid.
	// +kubebuilder:validation:Optional
	PrivateNetworkUUIDRef *v1.Reference `json:"privateNetworkUuidRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate privateNetworkUuid.
	// +kubebuilder:validation:Optional
	PrivateNetworkUUIDSelector *v1.Selector `json:"privateNetworkUuidSelector,omitempty" tf:"-"`

	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// DigitalOcean region where the cluster will reside.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	// +kubebuilder:validation:Optional
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// Database Droplet size associated with the cluster (ex. db-s-1vcpu-1gb). See here for a list of valid size slugs.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	// +kubebuilder:validation:Optional
	StorageSizeMib *string `json:"storageSizeMib,omitempty" tf:"storage_size_mib,omitempty"`

	// A list of tag names to be applied to the database cluster.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Engine version used by the cluster (ex. 14 for PostgreSQL 14).
	// When this value is changed, a call to the Upgrade major Version for a Database API operation is made with the new version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type MaintenanceWindowInitParameters struct {

	// The day of the week on which to apply maintenance updates.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour *string `json:"hour,omitempty" tf:"hour,omitempty"`
}

type MaintenanceWindowObservation struct {

	// The day of the week on which to apply maintenance updates.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	Hour *string `json:"hour,omitempty" tf:"hour,omitempty"`
}

type MaintenanceWindowParameters struct {

	// The day of the week on which to apply maintenance updates.
	// +kubebuilder:validation:Optional
	Day *string `json:"day" tf:"day,omitempty"`

	// The hour in UTC at which maintenance updates will be applied in 24 hour format.
	// +kubebuilder:validation:Optional
	Hour *string `json:"hour" tf:"hour,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Cluster is the Schema for the Clusters API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.engine) || (has(self.initProvider) && has(self.initProvider.engine))",message="spec.forProvider.engine is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeCount) || (has(self.initProvider) && has(self.initProvider.nodeCount))",message="spec.forProvider.nodeCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
