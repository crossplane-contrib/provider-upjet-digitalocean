/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionPoolInitParameters struct {

	// The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
	// +crossplane:generate:reference:type=Cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The database for use with the connection pool.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name for the database connection pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The desired size of the PGBouncer connection pool.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionPoolObservation struct {

	// The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The database for use with the connection pool.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// The hostname used to connect to the database connection pool.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The ID of the database connection pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name for the database connection pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network port that the database connection pool is listening on.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Same as host, but only accessible from resources within the account and in the same region.
	PrivateHost *string `json:"privateHost,omitempty" tf:"private_host,omitempty"`

	// The desired size of the PGBouncer connection pool.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionPoolParameters struct {

	// The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The database for use with the connection pool.
	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// The name for the database connection pool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The desired size of the PGBouncer connection pool.
	// +kubebuilder:validation:Optional
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

// ConnectionPoolSpec defines the desired state of ConnectionPool
type ConnectionPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConnectionPoolParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConnectionPoolInitParameters `json:"initProvider,omitempty"`
}

// ConnectionPoolStatus defines the observed state of ConnectionPool.
type ConnectionPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConnectionPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ConnectionPool is the Schema for the ConnectionPools API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type ConnectionPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbName) || (has(self.initProvider) && has(self.initProvider.dbName))",message="spec.forProvider.dbName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mode) || (has(self.initProvider) && has(self.initProvider.mode))",message="spec.forProvider.mode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   ConnectionPoolSpec   `json:"spec"`
	Status ConnectionPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConnectionPoolList contains a list of ConnectionPools
type ConnectionPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConnectionPool `json:"items"`
}

// Repository type metadata.
var (
	ConnectionPool_Kind             = "ConnectionPool"
	ConnectionPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConnectionPool_Kind}.String()
	ConnectionPool_KindAPIVersion   = ConnectionPool_Kind + "." + CRDGroupVersion.String()
	ConnectionPool_GroupVersionKind = CRDGroupVersion.WithKind(ConnectionPool_Kind)
)

func init() {
	SchemeBuilder.Register(&ConnectionPool{}, &ConnectionPoolList{})
}
