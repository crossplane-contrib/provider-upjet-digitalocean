// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MySQLConfigInitParameters struct {

	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *float64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute *float64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *float64 `json:"binlogRetentionPeriod,omitempty" tf:"binlog_retention_period,omitempty"`

	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or SYSTEM to use the MySQL server default.
	DefaultTimeZone *string `json:"defaultTimeZone,omitempty" tf:"default_time_zone,omitempty"`

	// The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.
	GroupConcatMaxLen *float64 `json:"groupConcatMaxLen,omitempty" tf:"group_concat_max_len,omitempty"`

	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *float64 `json:"informationSchemaStatsExpiry,omitempty" tf:"information_schema_stats_expiry,omitempty"`

	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize *float64 `json:"innodbFtMinTokenSize,omitempty" tf:"innodb_ft_min_token_size,omitempty"`

	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `json:"innodbFtServerStopwordTable,omitempty" tf:"innodb_ft_server_stopword_table,omitempty"`

	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout *float64 `json:"innodbLockWaitTimeout,omitempty" tf:"innodb_lock_wait_timeout,omitempty"`

	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize *float64 `json:"innodbLogBufferSize,omitempty" tf:"innodb_log_buffer_size,omitempty"`

	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *float64 `json:"innodbOnlineAlterLogMaxSize,omitempty" tf:"innodb_online_alter_log_max_size,omitempty"`

	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `json:"innodbPrintAllDeadlocks,omitempty" tf:"innodb_print_all_deadlocks,omitempty"`

	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout *bool `json:"innodbRollbackOnTimeout,omitempty" tf:"innodb_rollback_on_timeout,omitempty"`

	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout *float64 `json:"interactiveTimeout,omitempty" tf:"interactive_timeout,omitempty"`

	// The storage engine for in-memory internal temporary tables. Supported values are: TempTable, MEMORY.
	InternalTmpMemStorageEngine *string `json:"internalTmpMemStorageEngine,omitempty" tf:"internal_tmp_mem_storage_engine,omitempty"`

	// The time, in seconds, for a query to take to execute before being captured by slow_query_logs. Default is 10 seconds.
	LongQueryTime *float64 `json:"longQueryTime,omitempty" tf:"long_query_time,omitempty"`

	// The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).
	MaxAllowedPacket *float64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
	MaxHeapTableSize *float64 `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout *float64 `json:"netReadTimeout,omitempty" tf:"net_read_timeout,omitempty"`

	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *float64 `json:"netWriteTimeout,omitempty" tf:"net_write_timeout,omitempty"`

	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SQLRequirePrimaryKey *bool `json:"sqlRequirePrimaryKey,omitempty" tf:"sql_require_primary_key,omitempty"`

	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog *bool `json:"slowQueryLog,omitempty" tf:"slow_query_log,omitempty"`

	// The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).
	SortBufferSize *float64 `json:"sortBufferSize,omitempty" tf:"sort_buffer_size,omitempty"`

	// The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	TmpTableSize *float64 `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *float64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type MySQLConfigObservation struct {

	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *float64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute *float64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *float64 `json:"binlogRetentionPeriod,omitempty" tf:"binlog_retention_period,omitempty"`

	// The ID of the target MySQL cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or SYSTEM to use the MySQL server default.
	DefaultTimeZone *string `json:"defaultTimeZone,omitempty" tf:"default_time_zone,omitempty"`

	// The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.
	GroupConcatMaxLen *float64 `json:"groupConcatMaxLen,omitempty" tf:"group_concat_max_len,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *float64 `json:"informationSchemaStatsExpiry,omitempty" tf:"information_schema_stats_expiry,omitempty"`

	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize *float64 `json:"innodbFtMinTokenSize,omitempty" tf:"innodb_ft_min_token_size,omitempty"`

	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `json:"innodbFtServerStopwordTable,omitempty" tf:"innodb_ft_server_stopword_table,omitempty"`

	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout *float64 `json:"innodbLockWaitTimeout,omitempty" tf:"innodb_lock_wait_timeout,omitempty"`

	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize *float64 `json:"innodbLogBufferSize,omitempty" tf:"innodb_log_buffer_size,omitempty"`

	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *float64 `json:"innodbOnlineAlterLogMaxSize,omitempty" tf:"innodb_online_alter_log_max_size,omitempty"`

	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `json:"innodbPrintAllDeadlocks,omitempty" tf:"innodb_print_all_deadlocks,omitempty"`

	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout *bool `json:"innodbRollbackOnTimeout,omitempty" tf:"innodb_rollback_on_timeout,omitempty"`

	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout *float64 `json:"interactiveTimeout,omitempty" tf:"interactive_timeout,omitempty"`

	// The storage engine for in-memory internal temporary tables. Supported values are: TempTable, MEMORY.
	InternalTmpMemStorageEngine *string `json:"internalTmpMemStorageEngine,omitempty" tf:"internal_tmp_mem_storage_engine,omitempty"`

	// The time, in seconds, for a query to take to execute before being captured by slow_query_logs. Default is 10 seconds.
	LongQueryTime *float64 `json:"longQueryTime,omitempty" tf:"long_query_time,omitempty"`

	// The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).
	MaxAllowedPacket *float64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
	MaxHeapTableSize *float64 `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout *float64 `json:"netReadTimeout,omitempty" tf:"net_read_timeout,omitempty"`

	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *float64 `json:"netWriteTimeout,omitempty" tf:"net_write_timeout,omitempty"`

	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SQLRequirePrimaryKey *bool `json:"sqlRequirePrimaryKey,omitempty" tf:"sql_require_primary_key,omitempty"`

	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog *bool `json:"slowQueryLog,omitempty" tf:"slow_query_log,omitempty"`

	// The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).
	SortBufferSize *float64 `json:"sortBufferSize,omitempty" tf:"sort_buffer_size,omitempty"`

	// The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	TmpTableSize *float64 `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *float64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

type MySQLConfigParameters struct {

	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	// +kubebuilder:validation:Optional
	BackupHour *float64 `json:"backupHour,omitempty" tf:"backup_hour,omitempty"`

	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	// +kubebuilder:validation:Optional
	BackupMinute *float64 `json:"backupMinute,omitempty" tf:"backup_minute,omitempty"`

	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	// +kubebuilder:validation:Optional
	BinlogRetentionPeriod *float64 `json:"binlogRetentionPeriod,omitempty" tf:"binlog_retention_period,omitempty"`

	// The ID of the target MySQL cluster.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	// +kubebuilder:validation:Optional
	ConnectTimeout *float64 `json:"connectTimeout,omitempty" tf:"connect_timeout,omitempty"`

	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or SYSTEM to use the MySQL server default.
	// +kubebuilder:validation:Optional
	DefaultTimeZone *string `json:"defaultTimeZone,omitempty" tf:"default_time_zone,omitempty"`

	// The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.
	// +kubebuilder:validation:Optional
	GroupConcatMaxLen *float64 `json:"groupConcatMaxLen,omitempty" tf:"group_concat_max_len,omitempty"`

	// The time, in seconds, before cached statistics expire.
	// +kubebuilder:validation:Optional
	InformationSchemaStatsExpiry *float64 `json:"informationSchemaStatsExpiry,omitempty" tf:"information_schema_stats_expiry,omitempty"`

	// The minimum length of words that an InnoDB FULLTEXT index stores.
	// +kubebuilder:validation:Optional
	InnodbFtMinTokenSize *float64 `json:"innodbFtMinTokenSize,omitempty" tf:"innodb_ft_min_token_size,omitempty"`

	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	// +kubebuilder:validation:Optional
	InnodbFtServerStopwordTable *string `json:"innodbFtServerStopwordTable,omitempty" tf:"innodb_ft_server_stopword_table,omitempty"`

	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	// +kubebuilder:validation:Optional
	InnodbLockWaitTimeout *float64 `json:"innodbLockWaitTimeout,omitempty" tf:"innodb_lock_wait_timeout,omitempty"`

	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	// +kubebuilder:validation:Optional
	InnodbLogBufferSize *float64 `json:"innodbLogBufferSize,omitempty" tf:"innodb_log_buffer_size,omitempty"`

	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	// +kubebuilder:validation:Optional
	InnodbOnlineAlterLogMaxSize *float64 `json:"innodbOnlineAlterLogMaxSize,omitempty" tf:"innodb_online_alter_log_max_size,omitempty"`

	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	// +kubebuilder:validation:Optional
	InnodbPrintAllDeadlocks *bool `json:"innodbPrintAllDeadlocks,omitempty" tf:"innodb_print_all_deadlocks,omitempty"`

	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	// +kubebuilder:validation:Optional
	InnodbRollbackOnTimeout *bool `json:"innodbRollbackOnTimeout,omitempty" tf:"innodb_rollback_on_timeout,omitempty"`

	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	// +kubebuilder:validation:Optional
	InteractiveTimeout *float64 `json:"interactiveTimeout,omitempty" tf:"interactive_timeout,omitempty"`

	// The storage engine for in-memory internal temporary tables. Supported values are: TempTable, MEMORY.
	// +kubebuilder:validation:Optional
	InternalTmpMemStorageEngine *string `json:"internalTmpMemStorageEngine,omitempty" tf:"internal_tmp_mem_storage_engine,omitempty"`

	// The time, in seconds, for a query to take to execute before being captured by slow_query_logs. Default is 10 seconds.
	// +kubebuilder:validation:Optional
	LongQueryTime *float64 `json:"longQueryTime,omitempty" tf:"long_query_time,omitempty"`

	// The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).
	// +kubebuilder:validation:Optional
	MaxAllowedPacket *float64 `json:"maxAllowedPacket,omitempty" tf:"max_allowed_packet,omitempty"`

	// The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)
	// +kubebuilder:validation:Optional
	MaxHeapTableSize *float64 `json:"maxHeapTableSize,omitempty" tf:"max_heap_table_size,omitempty"`

	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	// +kubebuilder:validation:Optional
	NetReadTimeout *float64 `json:"netReadTimeout,omitempty" tf:"net_read_timeout,omitempty"`

	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	// +kubebuilder:validation:Optional
	NetWriteTimeout *float64 `json:"netWriteTimeout,omitempty" tf:"net_write_timeout,omitempty"`

	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	// +kubebuilder:validation:Optional
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	// +kubebuilder:validation:Optional
	SQLRequirePrimaryKey *bool `json:"sqlRequirePrimaryKey,omitempty" tf:"sql_require_primary_key,omitempty"`

	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	// +kubebuilder:validation:Optional
	SlowQueryLog *bool `json:"slowQueryLog,omitempty" tf:"slow_query_log,omitempty"`

	// The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).
	// +kubebuilder:validation:Optional
	SortBufferSize *float64 `json:"sortBufferSize,omitempty" tf:"sort_buffer_size,omitempty"`

	// The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).
	// +kubebuilder:validation:Optional
	TmpTableSize *float64 `json:"tmpTableSize,omitempty" tf:"tmp_table_size,omitempty"`

	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	// +kubebuilder:validation:Optional
	WaitTimeout *float64 `json:"waitTimeout,omitempty" tf:"wait_timeout,omitempty"`
}

// MySQLConfigSpec defines the desired state of MySQLConfig
type MySQLConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MySQLConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MySQLConfigInitParameters `json:"initProvider,omitempty"`
}

// MySQLConfigStatus defines the observed state of MySQLConfig.
type MySQLConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MySQLConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MySQLConfig is the Schema for the MySQLConfigs API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type MySQLConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MySQLConfigSpec   `json:"spec"`
	Status            MySQLConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MySQLConfigList contains a list of MySQLConfigs
type MySQLConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MySQLConfig `json:"items"`
}

// Repository type metadata.
var (
	MySQLConfig_Kind             = "MySQLConfig"
	MySQLConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MySQLConfig_Kind}.String()
	MySQLConfig_KindAPIVersion   = MySQLConfig_Kind + "." + CRDGroupVersion.String()
	MySQLConfig_GroupVersionKind = CRDGroupVersion.WithKind(MySQLConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&MySQLConfig{}, &MySQLConfigList{})
}
