// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicaInitParameters struct {

	// The name for the database replica.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// DigitalOcean region where the replica will reside.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Database Droplet size associated with the replica (ex. db-s-1vcpu-1gb). Note that when resizing an existing replica, its size can only be increased. Decreasing its size is not supported.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	StorageSizeMib *string `json:"storageSizeMib,omitempty" tf:"storage_size_mib,omitempty"`

	// A list of tag names to be applied to the database replica.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReplicaObservation struct {

	// The ID of the original source database cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Name of the replica's default database.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Database replica's hostname.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name for the database replica.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Network port that the database replica is listening on.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Same as host, but only accessible from resources within the account and in the same region.
	PrivateHost *string `json:"privateHost,omitempty" tf:"private_host,omitempty"`

	// The ID of the VPC where the database replica will be located.
	PrivateNetworkUUID *string `json:"privateNetworkUuid,omitempty" tf:"private_network_uuid,omitempty"`

	// DigitalOcean region where the replica will reside.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Database Droplet size associated with the replica (ex. db-s-1vcpu-1gb). Note that when resizing an existing replica, its size can only be increased. Decreasing its size is not supported.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	StorageSizeMib *string `json:"storageSizeMib,omitempty" tf:"storage_size_mib,omitempty"`

	// A list of tag names to be applied to the database replica.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The UUID of the database replica. The uuid can be used to reference the database replica as the target database cluster in other resources. See example  "Create firewall rule for database replica" above.
	// The unique universal identifier for the database replica.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// Username for the replica's default user.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ReplicaParameters struct {

	// The ID of the original source database cluster.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The name for the database replica.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The ID of the VPC where the database replica will be located.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/digitalocean/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	PrivateNetworkUUID *string `json:"privateNetworkUuid,omitempty" tf:"private_network_uuid,omitempty"`

	// Reference to a VPC in digitalocean to populate privateNetworkUuid.
	// +kubebuilder:validation:Optional
	PrivateNetworkUUIDRef *v1.Reference `json:"privateNetworkUuidRef,omitempty" tf:"-"`

	// Selector for a VPC in digitalocean to populate privateNetworkUuid.
	// +kubebuilder:validation:Optional
	PrivateNetworkUUIDSelector *v1.Selector `json:"privateNetworkUuidSelector,omitempty" tf:"-"`

	// DigitalOcean region where the replica will reside.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Database Droplet size associated with the replica (ex. db-s-1vcpu-1gb). Note that when resizing an existing replica, its size can only be increased. Decreasing its size is not supported.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	StorageSizeMib *string `json:"storageSizeMib,omitempty" tf:"storage_size_mib,omitempty"`

	// A list of tag names to be applied to the database replica.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ReplicaSpec defines the desired state of Replica
type ReplicaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicaParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ReplicaInitParameters `json:"initProvider,omitempty"`
}

// ReplicaStatus defines the observed state of Replica.
type ReplicaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Replica is the Schema for the Replicas API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Replica struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ReplicaSpec   `json:"spec"`
	Status ReplicaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicaList contains a list of Replicas
type ReplicaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Replica `json:"items"`
}

// Repository type metadata.
var (
	Replica_Kind             = "Replica"
	Replica_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Replica_Kind}.String()
	Replica_KindAPIVersion   = Replica_Kind + "." + CRDGroupVersion.String()
	Replica_GroupVersionKind = CRDGroupVersion.WithKind(Replica_Kind)
)

func init() {
	SchemeBuilder.Register(&Replica{}, &ReplicaList{})
}
