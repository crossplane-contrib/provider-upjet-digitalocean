/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecordInitParameters struct {

	// The domain to add the record to.
	// +crossplane:generate:reference:type=Domain
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Reference to a Domain to populate domain.
	// +kubebuilder:validation:Optional
	DomainRef *v1.Reference `json:"domainRef,omitempty" tf:"-"`

	// Selector for a Domain to populate domain.
	// +kubebuilder:validation:Optional
	DomainSelector *v1.Selector `json:"domainSelector,omitempty" tf:"-"`

	// The flags of the record. Only valid when type is CAA. Must be between 0 and 255.
	Flags *float64 `json:"flags,omitempty" tf:"flags,omitempty"`

	// The hostname of the record. Use @ for records on domain's name itself.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The port of the record. Only valid when type is SRV.  Must be between 1 and 65535.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The priority of the record. Only valid when type is MX or SRV. Must be between 0 and 65535.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The time to live for the record, in seconds. Must be at least 0. Defaults to 1800.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The tag of the record. Only valid when type is CAA. Must be one of issue, issuewild, or iodef.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of record. Must be one of A, AAAA, CAA, CNAME, MX, NS, TXT, or SRV.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the record.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// The weight of the record. Only valid when type is SRV.  Must be between 0 and 65535.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RecordObservation struct {

	// The domain to add the record to.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// The flags of the record. Only valid when type is CAA. Must be between 0 and 255.
	Flags *float64 `json:"flags,omitempty" tf:"flags,omitempty"`

	// The FQDN of the record
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// The record ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The hostname of the record. Use @ for records on domain's name itself.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The port of the record. Only valid when type is SRV.  Must be between 1 and 65535.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The priority of the record. Only valid when type is MX or SRV. Must be between 0 and 65535.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The time to live for the record, in seconds. Must be at least 0. Defaults to 1800.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The tag of the record. Only valid when type is CAA. Must be one of issue, issuewild, or iodef.
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of record. Must be one of A, AAAA, CAA, CNAME, MX, NS, TXT, or SRV.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the record.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// The weight of the record. Only valid when type is SRV.  Must be between 0 and 65535.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RecordParameters struct {

	// The domain to add the record to.
	// +crossplane:generate:reference:type=Domain
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Reference to a Domain to populate domain.
	// +kubebuilder:validation:Optional
	DomainRef *v1.Reference `json:"domainRef,omitempty" tf:"-"`

	// Selector for a Domain to populate domain.
	// +kubebuilder:validation:Optional
	DomainSelector *v1.Selector `json:"domainSelector,omitempty" tf:"-"`

	// The flags of the record. Only valid when type is CAA. Must be between 0 and 255.
	// +kubebuilder:validation:Optional
	Flags *float64 `json:"flags,omitempty" tf:"flags,omitempty"`

	// The hostname of the record. Use @ for records on domain's name itself.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The port of the record. Only valid when type is SRV.  Must be between 1 and 65535.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The priority of the record. Only valid when type is MX or SRV. Must be between 0 and 65535.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The time to live for the record, in seconds. Must be at least 0. Defaults to 1800.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// The tag of the record. Only valid when type is CAA. Must be one of issue, issuewild, or iodef.
	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// The type of record. Must be one of A, AAAA, CAA, CNAME, MX, NS, TXT, or SRV.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The value of the record.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// The weight of the record. Only valid when type is SRV.  Must be between 0 and 65535.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// RecordSpec defines the desired state of Record
type RecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RecordInitParameters `json:"initProvider,omitempty"`
}

// RecordStatus defines the observed state of Record.
type RecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Record is the Schema for the Records API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   RecordSpec   `json:"spec"`
	Status RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordList contains a list of Records
type RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Record `json:"items"`
}

// Repository type metadata.
var (
	Record_Kind             = "Record"
	Record_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Record_Kind}.String()
	Record_KindAPIVersion   = Record_Kind + "." + CRDGroupVersion.String()
	Record_GroupVersionKind = CRDGroupVersion.WithKind(Record_Kind)
)

func init() {
	SchemeBuilder.Register(&Record{}, &RecordList{})
}
