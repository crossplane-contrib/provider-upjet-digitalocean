// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterInitParameters struct {

	// A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
	AutoUpgrade *bool `json:"autoUpgrade,omitempty" tf:"auto_upgrade,omitempty"`

	// Use with caution. When set to true, all associated DigitalOcean resources created via the Kubernetes API (load balancers, volumes, and volume snapshots) will be destroyed along with the cluster when it is destroyed.
	DestroyAllAssociatedResources *bool `json:"destroyAllAssociatedResources,omitempty" tf:"destroy_all_associated_resources,omitempty"`

	// Enable/disable the high availability control plane for a cluster. Once enabled for a cluster, high availability cannot be disabled. Default: false
	Ha *bool `json:"ha,omitempty" tf:"ha,omitempty"`

	// A block representing the cluster's maintenance window. Updates will be applied within this window. If not specified, a default maintenance window will be chosen. auto_upgrade must be set to true for this to have an effect.
	MaintenancePolicy []MaintenancePolicyInitParameters `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// A name for the Kubernetes cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A block representing the cluster's default node pool. Additional node pools may be added to the cluster using the digitalocean_kubernetes_node_pool resource. The following arguments may be specified:
	NodePool []NodePoolInitParameters `json:"nodePool,omitempty" tf:"node_pool,omitempty"`

	// The slug identifier for the region where the Kubernetes cluster will be created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Enables or disables the DigitalOcean container registry integration for the cluster. This requires that a container registry has first been created for the account. Default: false
	RegistryIntegration *bool `json:"registryIntegration,omitempty" tf:"registry_integration,omitempty"`

	// Enable/disable surge upgrades for a cluster. Default: false
	SurgeUpgrade *bool `json:"surgeUpgrade,omitempty" tf:"surge_upgrade,omitempty"`

	// A list of tag names applied to the node pool.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The slug identifier for the version of Kubernetes used for the cluster. Use doctl to find the available versions doctl kubernetes options versions. (Note: A cluster may only be upgraded to newer versions in-place. If the version is decreased, a new resource will be created.)
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ClusterObservation struct {

	// A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
	AutoUpgrade *bool `json:"autoUpgrade,omitempty" tf:"auto_upgrade,omitempty"`

	// The range of IP addresses in the overlay network of the Kubernetes cluster.
	ClusterSubnet *string `json:"clusterSubnet,omitempty" tf:"cluster_subnet,omitempty"`

	// The date and time when the Kubernetes cluster was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Use with caution. When set to true, all associated DigitalOcean resources created via the Kubernetes API (load balancers, volumes, and volume snapshots) will be destroyed along with the cluster when it is destroyed.
	DestroyAllAssociatedResources *bool `json:"destroyAllAssociatedResources,omitempty" tf:"destroy_all_associated_resources,omitempty"`

	// The base URL of the API server on the Kubernetes master node.
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// Enable/disable the high availability control plane for a cluster. Once enabled for a cluster, high availability cannot be disabled. Default: false
	Ha *bool `json:"ha,omitempty" tf:"ha,omitempty"`

	// A unique ID that can be used to identify and reference a Kubernetes cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The public IPv4 address of the Kubernetes master node. This will not be set if high availability is configured on the cluster (v1.21+)
	IPv4Address *string `json:"ipv4Address,omitempty" tf:"ipv4_address,omitempty"`

	// A block representing the cluster's maintenance window. Updates will be applied within this window. If not specified, a default maintenance window will be chosen. auto_upgrade must be set to true for this to have an effect.
	MaintenancePolicy []MaintenancePolicyObservation `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// A name for the Kubernetes cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A block representing the cluster's default node pool. Additional node pools may be added to the cluster using the digitalocean_kubernetes_node_pool resource. The following arguments may be specified:
	NodePool []NodePoolObservation `json:"nodePool,omitempty" tf:"node_pool,omitempty"`

	// The slug identifier for the region where the Kubernetes cluster will be created.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Enables or disables the DigitalOcean container registry integration for the cluster. This requires that a container registry has first been created for the account. Default: false
	RegistryIntegration *bool `json:"registryIntegration,omitempty" tf:"registry_integration,omitempty"`

	// The range of assignable IP addresses for services running in the Kubernetes cluster.
	ServiceSubnet *string `json:"serviceSubnet,omitempty" tf:"service_subnet,omitempty"`

	// A string indicating the current status of the cluster. Potential values include running, provisioning, and errored.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Enable/disable surge upgrades for a cluster. Default: false
	SurgeUpgrade *bool `json:"surgeUpgrade,omitempty" tf:"surge_upgrade,omitempty"`

	// A list of tag names applied to the node pool.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The date and time when the Kubernetes cluster was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// The uniform resource name (URN) for the Kubernetes cluster.
	Urn *string `json:"urn,omitempty" tf:"urn,omitempty"`

	// The ID of the VPC where the Kubernetes cluster will be located.
	VPCUUID *string `json:"vpcUuid,omitempty" tf:"vpc_uuid,omitempty"`

	// The slug identifier for the version of Kubernetes used for the cluster. Use doctl to find the available versions doctl kubernetes options versions. (Note: A cluster may only be upgraded to newer versions in-place. If the version is decreased, a new resource will be created.)
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ClusterParameters struct {

	// A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.
	// +kubebuilder:validation:Optional
	AutoUpgrade *bool `json:"autoUpgrade,omitempty" tf:"auto_upgrade,omitempty"`

	// Use with caution. When set to true, all associated DigitalOcean resources created via the Kubernetes API (load balancers, volumes, and volume snapshots) will be destroyed along with the cluster when it is destroyed.
	// +kubebuilder:validation:Optional
	DestroyAllAssociatedResources *bool `json:"destroyAllAssociatedResources,omitempty" tf:"destroy_all_associated_resources,omitempty"`

	// Enable/disable the high availability control plane for a cluster. Once enabled for a cluster, high availability cannot be disabled. Default: false
	// +kubebuilder:validation:Optional
	Ha *bool `json:"ha,omitempty" tf:"ha,omitempty"`

	// A block representing the cluster's maintenance window. Updates will be applied within this window. If not specified, a default maintenance window will be chosen. auto_upgrade must be set to true for this to have an effect.
	// +kubebuilder:validation:Optional
	MaintenancePolicy []MaintenancePolicyParameters `json:"maintenancePolicy,omitempty" tf:"maintenance_policy,omitempty"`

	// A name for the Kubernetes cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A block representing the cluster's default node pool. Additional node pools may be added to the cluster using the digitalocean_kubernetes_node_pool resource. The following arguments may be specified:
	// +kubebuilder:validation:Optional
	NodePool []NodePoolParameters `json:"nodePool,omitempty" tf:"node_pool,omitempty"`

	// The slug identifier for the region where the Kubernetes cluster will be created.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Enables or disables the DigitalOcean container registry integration for the cluster. This requires that a container registry has first been created for the account. Default: false
	// +kubebuilder:validation:Optional
	RegistryIntegration *bool `json:"registryIntegration,omitempty" tf:"registry_integration,omitempty"`

	// Enable/disable surge upgrades for a cluster. Default: false
	// +kubebuilder:validation:Optional
	SurgeUpgrade *bool `json:"surgeUpgrade,omitempty" tf:"surge_upgrade,omitempty"`

	// A list of tag names applied to the node pool.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the VPC where the Kubernetes cluster will be located.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/vpc/v1alpha1.VPC
	// +kubebuilder:validation:Optional
	VPCUUID *string `json:"vpcUuid,omitempty" tf:"vpc_uuid,omitempty"`

	// Reference to a VPC in vpc to populate vpcUuid.
	// +kubebuilder:validation:Optional
	VPCUUIDRef *v1.Reference `json:"vpcUuidRef,omitempty" tf:"-"`

	// Selector for a VPC in vpc to populate vpcUuid.
	// +kubebuilder:validation:Optional
	VPCUUIDSelector *v1.Selector `json:"vpcUuidSelector,omitempty" tf:"-"`

	// The slug identifier for the version of Kubernetes used for the cluster. Use doctl to find the available versions doctl kubernetes options versions. (Note: A cluster may only be upgraded to newer versions in-place. If the version is decreased, a new resource will be created.)
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type KubeConfigInitParameters struct {
}

type KubeConfigObservation struct {

	// The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientCertificate *string `json:"clientCertificate,omitempty" tf:"client_certificate,omitempty"`

	// The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
	ClientKey *string `json:"clientKey,omitempty" tf:"client_key,omitempty"`

	// The base64 encoded public certificate for the cluster's certificate authority.
	ClusterCACertificate *string `json:"clusterCaCertificate,omitempty" tf:"cluster_ca_certificate,omitempty"`

	// The date and time when the credentials will expire and need to be regenerated.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// The URL of the API server on the Kubernetes master node.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The full contents of the Kubernetes cluster's kubeconfig file.
	RawConfig *string `json:"rawConfig,omitempty" tf:"raw_config,omitempty"`

	// The DigitalOcean API access token used by clients to access the cluster.
	Token *string `json:"token,omitempty" tf:"token,omitempty"`
}

type KubeConfigParameters struct {
}

type MaintenancePolicyInitParameters struct {

	// The day of the maintenance window policy. May be one of "monday" through "sunday", or "any" to indicate an arbitrary week day.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// hour clock format / HH:MM notation (e.g., 15:00).
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type MaintenancePolicyObservation struct {

	// The day of the maintenance window policy. May be one of "monday" through "sunday", or "any" to indicate an arbitrary week day.
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// A string denoting the duration of the service window, e.g., "04:00".
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// hour clock format / HH:MM notation (e.g., 15:00).
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type MaintenancePolicyParameters struct {

	// The day of the maintenance window policy. May be one of "monday" through "sunday", or "any" to indicate an arbitrary week day.
	// +kubebuilder:validation:Optional
	Day *string `json:"day,omitempty" tf:"day,omitempty"`

	// hour clock format / HH:MM notation (e.g., 15:00).
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`
}

type NodePoolInitParameters struct {

	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale *bool `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding Node resources.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// A name for the Kubernetes cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// A list of tag names applied to the node pool.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A block representing a taint applied to all nodes in the pool. Each taint exports the following attributes (taints must be unique by key and effect pair):
	Taint []TaintInitParameters `json:"taint,omitempty" tf:"taint,omitempty"`
}

type NodePoolObservation struct {

	// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount *float64 `json:"actualNodeCount,omitempty" tf:"actual_node_count,omitempty"`

	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale *bool `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// A unique ID that can be used to identify and reference a Kubernetes cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding Node resources.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// A name for the Kubernetes cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// A list of nodes in the pool. Each node exports the following attributes:
	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// A list of tag names applied to the node pool.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A block representing a taint applied to all nodes in the pool. Each taint exports the following attributes (taints must be unique by key and effect pair):
	Taint []TaintObservation `json:"taint,omitempty" tf:"taint,omitempty"`
}

type NodePoolParameters struct {

	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	// +kubebuilder:validation:Optional
	AutoScale *bool `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding Node resources.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	// +kubebuilder:validation:Optional
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	// +kubebuilder:validation:Optional
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// A name for the Kubernetes cluster.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	// +kubebuilder:validation:Optional
	Size *string `json:"size" tf:"size,omitempty"`

	// A list of tag names applied to the node pool.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A block representing a taint applied to all nodes in the pool. Each taint exports the following attributes (taints must be unique by key and effect pair):
	// +kubebuilder:validation:Optional
	Taint []TaintParameters `json:"taint,omitempty" tf:"taint,omitempty"`
}

type NodesInitParameters struct {
}

type NodesObservation struct {

	// The date and time when the Kubernetes cluster was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The id of the node's droplet
	DropletID *string `json:"dropletId,omitempty" tf:"droplet_id,omitempty"`

	// A unique ID that can be used to identify and reference a Kubernetes cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A name for the Kubernetes cluster.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A string indicating the current status of the cluster. Potential values include running, provisioning, and errored.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The date and time when the Kubernetes cluster was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NodesParameters struct {
}

type TaintInitParameters struct {

	// How the node reacts to pods that it won't tolerate. Available effect values are: "NoSchedule", "PreferNoSchedule", "NoExecute".
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintObservation struct {

	// How the node reacts to pods that it won't tolerate. Available effect values are: "NoSchedule", "PreferNoSchedule", "NoExecute".
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintParameters struct {

	// How the node reacts to pods that it won't tolerate. Available effect values are: "NoSchedule", "PreferNoSchedule", "NoExecute".
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodePool) || (has(self.initProvider) && has(self.initProvider.nodePool))",message="spec.forProvider.nodePool is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
