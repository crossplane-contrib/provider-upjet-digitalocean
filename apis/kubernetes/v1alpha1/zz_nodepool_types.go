/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodePoolInitParameters_2 struct {

	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale *bool `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// The ID of the Kubernetes cluster to which the node pool is associated.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/kubernetes/v1alpha1.Cluster
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in kubernetes to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in kubernetes to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding Node resources.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// A name for the node pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// A list of tag names to be applied to the Kubernetes cluster.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of taints applied to all nodes in the pool.
	Taint []NodePoolTaintInitParameters `json:"taint,omitempty" tf:"taint,omitempty"`
}

type NodePoolNodesInitParameters struct {
}

type NodePoolNodesObservation struct {

	// The date and time when the node was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// The id of the node's droplet
	DropletID *string `json:"dropletId,omitempty" tf:"droplet_id,omitempty"`

	// A unique ID that can be used to identify and reference the node pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A name for the node pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A string indicating the current status of the individual node.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The date and time when the node was last updated.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type NodePoolNodesParameters struct {
}

type NodePoolObservation_2 struct {

	// A computed field representing the actual number of nodes in the node pool, which is especially useful when auto-scaling is enabled.
	ActualNodeCount *float64 `json:"actualNodeCount,omitempty" tf:"actual_node_count,omitempty"`

	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	AutoScale *bool `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// The ID of the Kubernetes cluster to which the node pool is associated.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// A unique ID that can be used to identify and reference the node pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding Node resources.
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// A name for the node pool.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// A list of nodes in the pool. Each node exports the following attributes:
	Nodes []NodePoolNodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// A list of tag names to be applied to the Kubernetes cluster.
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of taints applied to all nodes in the pool.
	Taint []NodePoolTaintObservation `json:"taint,omitempty" tf:"taint,omitempty"`
}

type NodePoolParameters_2 struct {

	// Enable auto-scaling of the number of nodes in the node pool within the given min/max range.
	// +kubebuilder:validation:Optional
	AutoScale *bool `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// The ID of the Kubernetes cluster to which the node pool is associated.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-upjet-digitalocean/apis/kubernetes/v1alpha1.Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster in kubernetes to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster in kubernetes to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// A map of key/value pairs to apply to nodes in the pool. The labels are exposed in the Kubernetes API as labels in the metadata of the corresponding Node resources.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// If auto-scaling is enabled, this represents the maximum number of nodes that the node pool can be scaled up to.
	// +kubebuilder:validation:Optional
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// If auto-scaling is enabled, this represents the minimum number of nodes that the node pool can be scaled down to.
	// +kubebuilder:validation:Optional
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// A name for the node pool.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The number of Droplet instances in the node pool. If auto-scaling is enabled, this should only be set if the desired result is to explicitly reset the number of nodes to this value. If auto-scaling is enabled, and the node count is outside of the given min/max range, it will use the min nodes value.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// The slug identifier for the type of Droplet to be used as workers in the node pool.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// A list of tag names to be applied to the Kubernetes cluster.
	// +kubebuilder:validation:Optional
	// +listType=set
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of taints applied to all nodes in the pool.
	// +kubebuilder:validation:Optional
	Taint []NodePoolTaintParameters `json:"taint,omitempty" tf:"taint,omitempty"`
}

type NodePoolTaintInitParameters struct {

	// How the node reacts to pods that it won't tolerate. Available effect values are: "NoSchedule", "PreferNoSchedule", "NoExecute".
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodePoolTaintObservation struct {

	// How the node reacts to pods that it won't tolerate. Available effect values are: "NoSchedule", "PreferNoSchedule", "NoExecute".
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodePoolTaintParameters struct {

	// How the node reacts to pods that it won't tolerate. Available effect values are: "NoSchedule", "PreferNoSchedule", "NoExecute".
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// An arbitrary string. The "key" and "value" fields of the "taint" object form a key-value pair.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// NodePoolSpec defines the desired state of NodePool
type NodePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodePoolParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodePoolInitParameters_2 `json:"initProvider,omitempty"`
}

// NodePoolStatus defines the observed state of NodePool.
type NodePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodePoolObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// NodePool is the Schema for the NodePools API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type NodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.size) || (has(self.initProvider) && has(self.initProvider.size))",message="spec.forProvider.size is a required parameter"
	Spec   NodePoolSpec   `json:"spec"`
	Status NodePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodePoolList contains a list of NodePools
type NodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodePool `json:"items"`
}

// Repository type metadata.
var (
	NodePool_Kind             = "NodePool"
	NodePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodePool_Kind}.String()
	NodePool_KindAPIVersion   = NodePool_Kind + "." + CRDGroupVersion.String()
	NodePool_GroupVersionKind = CRDGroupVersion.WithKind(NodePool_Kind)
)

func init() {
	SchemeBuilder.Register(&NodePool{}, &NodePoolList{})
}
