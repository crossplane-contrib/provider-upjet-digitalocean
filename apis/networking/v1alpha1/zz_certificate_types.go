// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateInitParameters struct {

	// The full PEM-formatted trust chain
	// between the certificate authority's certificate and your domain's TLS
	// certificate. Only valid when type is custom.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// List of fully qualified domain names (FQDNs) for
	// which the certificate will be issued. The domains must be managed using
	// DigitalOcean's DNS. Only valid when type is lets_encrypt.
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// The contents of a PEM-formatted public
	// TLS certificate. Only valid when type is custom.
	LeafCertificate *string `json:"leafCertificate,omitempty" tf:"leaf_certificate,omitempty"`

	// The name of the certificate for identification.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The type of certificate to provision. Can be either
	// custom or lets_encrypt. Defaults to custom.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CertificateObservation struct {

	// The full PEM-formatted trust chain
	// between the certificate authority's certificate and your domain's TLS
	// certificate. Only valid when type is custom.
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// List of fully qualified domain names (FQDNs) for
	// which the certificate will be issued. The domains must be managed using
	// DigitalOcean's DNS. Only valid when type is lets_encrypt.
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// The unique name of the certificate
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The contents of a PEM-formatted public
	// TLS certificate. Only valid when type is custom.
	LeafCertificate *string `json:"leafCertificate,omitempty" tf:"leaf_certificate,omitempty"`

	// The name of the certificate for identification.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The expiration date of the certificate
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	// The SHA-1 fingerprint of the certificate
	Sha1Fingerprint *string `json:"sha1Fingerprint,omitempty" tf:"sha1_fingerprint,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The type of certificate to provision. Can be either
	// custom or lets_encrypt. Defaults to custom.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The UUID of the certificate
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type CertificateParameters struct {

	// The full PEM-formatted trust chain
	// between the certificate authority's certificate and your domain's TLS
	// certificate. Only valid when type is custom.
	// +kubebuilder:validation:Optional
	CertificateChain *string `json:"certificateChain,omitempty" tf:"certificate_chain,omitempty"`

	// List of fully qualified domain names (FQDNs) for
	// which the certificate will be issued. The domains must be managed using
	// DigitalOcean's DNS. Only valid when type is lets_encrypt.
	// +kubebuilder:validation:Optional
	Domains []*string `json:"domains,omitempty" tf:"domains,omitempty"`

	// The contents of a PEM-formatted public
	// TLS certificate. Only valid when type is custom.
	// +kubebuilder:validation:Optional
	LeafCertificate *string `json:"leafCertificate,omitempty" tf:"leaf_certificate,omitempty"`

	// The name of the certificate for identification.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The contents of a PEM-formatted private-key
	// corresponding to the SSL certificate. Only valid when type is custom.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The type of certificate to provision. Can be either
	// custom or lets_encrypt. Defaults to custom.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CertificateSpec defines the desired state of Certificate
type CertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CertificateInitParameters `json:"initProvider,omitempty"`
}

// CertificateStatus defines the observed state of Certificate.
type CertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Certificate is the Schema for the Certificates API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Certificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   CertificateSpec   `json:"spec"`
	Status CertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateList contains a list of Certificates
type CertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Certificate `json:"items"`
}

// Repository type metadata.
var (
	Certificate_Kind             = "Certificate"
	Certificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Certificate_Kind}.String()
	Certificate_KindAPIVersion   = Certificate_Kind + "." + CRDGroupVersion.String()
	Certificate_GroupVersionKind = CRDGroupVersion.WithKind(Certificate_Kind)
)

func init() {
	SchemeBuilder.Register(&Certificate{}, &CertificateList{})
}
