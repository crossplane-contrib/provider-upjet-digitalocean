/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha1 "github.com/crossplane-contrib/provider-upjet-digitalocean/apis/dns/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-upjet-digitalocean/apis/droplet/v1alpha1"
	v1alpha12 "github.com/crossplane-contrib/provider-upjet-digitalocean/apis/project/v1alpha1"
	v1alpha13 "github.com/crossplane-contrib/provider-upjet-digitalocean/apis/vpc/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Domains),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.DomainsRefs,
		Selector:      mg.Spec.ForProvider.ID,
		To: reference.To{
			List:    &v1alpha1.DomainList{},
			Managed: &v1alpha1.Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Domains")
	}
	mg.Spec.ForProvider.Domains = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.DomainsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Domains),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.DomainsRefs,
		Selector:      mg.Spec.InitProvider.ID,
		To: reference.To{
			List:    &v1alpha1.DomainList{},
			Managed: &v1alpha1.Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Domains")
	}
	mg.Spec.InitProvider.Domains = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.DomainsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this Firewall.
func (mg *Firewall) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromFloatPtrValues(mg.Spec.ForProvider.DropletIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.DropletIdsRefs,
		Selector:      mg.Spec.ForProvider.DropletIdsSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DropletIds")
	}
	mg.Spec.ForProvider.DropletIds = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.DropletIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromFloatPtrValues(mg.Spec.InitProvider.DropletIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.DropletIdsRefs,
		Selector:      mg.Spec.InitProvider.DropletIdsSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DropletIds")
	}
	mg.Spec.InitProvider.DropletIds = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.DropletIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this IP.
func (mg *IP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.DropletID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DropletIDRef,
		Selector:     mg.Spec.ForProvider.DropletIDSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DropletID")
	}
	mg.Spec.ForProvider.DropletID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DropletIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.DropletID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DropletIDRef,
		Selector:     mg.Spec.InitProvider.DropletIDSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DropletID")
	}
	mg.Spec.InitProvider.DropletID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DropletIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IPAssignment.
func (mg *IPAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.ForProvider.DropletID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DropletIDRef,
		Selector:     mg.Spec.ForProvider.DropletIDSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DropletID")
	}
	mg.Spec.ForProvider.DropletID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DropletIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IPAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IPAddressRef,
		Selector:     mg.Spec.ForProvider.IPAddressSelector,
		To: reference.To{
			List:    &IPList{},
			Managed: &IP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IPAddress")
	}
	mg.Spec.ForProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IPAddressRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromFloatPtrValue(mg.Spec.InitProvider.DropletID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.DropletIDRef,
		Selector:     mg.Spec.InitProvider.DropletIDSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DropletID")
	}
	mg.Spec.InitProvider.DropletID = reference.ToFloatPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DropletIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IPAddress),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.IPAddressRef,
		Selector:     mg.Spec.InitProvider.IPAddressSelector,
		To: reference.To{
			List:    &IPList{},
			Managed: &IP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IPAddress")
	}
	mg.Spec.InitProvider.IPAddress = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IPAddressRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Loadbalancer.
func (mg *Loadbalancer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromFloatPtrValues(mg.Spec.ForProvider.DropletIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.DropletIdsRefs,
		Selector:      mg.Spec.ForProvider.DropletIdsSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DropletIds")
	}
	mg.Spec.ForProvider.DropletIds = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.DropletIdsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ForwardingRule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ForwardingRule[i3].CertificateName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ForwardingRule[i3].CertificateNameRef,
			Selector:     mg.Spec.ForProvider.ForwardingRule[i3].CertificateNameSelector,
			To: reference.To{
				List:    &CertificateList{},
				Managed: &Certificate{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ForwardingRule[i3].CertificateName")
		}
		mg.Spec.ForProvider.ForwardingRule[i3].CertificateName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ForwardingRule[i3].CertificateNameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ProjectIDRef,
		Selector:     mg.Spec.ForProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha12.ProjectList{},
			Managed: &v1alpha12.Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ProjectID")
	}
	mg.Spec.ForProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VPCUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VPCUUIDRef,
		Selector:     mg.Spec.ForProvider.VPCUUIDSelector,
		To: reference.To{
			List:    &v1alpha13.VPCList{},
			Managed: &v1alpha13.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VPCUUID")
	}
	mg.Spec.ForProvider.VPCUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VPCUUIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromFloatPtrValues(mg.Spec.InitProvider.DropletIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.InitProvider.DropletIdsRefs,
		Selector:      mg.Spec.InitProvider.DropletIdsSelector,
		To: reference.To{
			List:    &v1alpha11.DropletList{},
			Managed: &v1alpha11.Droplet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DropletIds")
	}
	mg.Spec.InitProvider.DropletIds = reference.ToFloatPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.DropletIdsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ForwardingRule); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ForwardingRule[i3].CertificateName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ForwardingRule[i3].CertificateNameRef,
			Selector:     mg.Spec.InitProvider.ForwardingRule[i3].CertificateNameSelector,
			To: reference.To{
				List:    &CertificateList{},
				Managed: &Certificate{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ForwardingRule[i3].CertificateName")
		}
		mg.Spec.InitProvider.ForwardingRule[i3].CertificateName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.ForwardingRule[i3].CertificateNameRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ProjectID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ProjectIDRef,
		Selector:     mg.Spec.InitProvider.ProjectIDSelector,
		To: reference.To{
			List:    &v1alpha12.ProjectList{},
			Managed: &v1alpha12.Project{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ProjectID")
	}
	mg.Spec.InitProvider.ProjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ProjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VPCUUID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VPCUUIDRef,
		Selector:     mg.Spec.InitProvider.VPCUUIDSelector,
		To: reference.To{
			List:    &v1alpha13.VPCList{},
			Managed: &v1alpha13.VPC{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VPCUUID")
	}
	mg.Spec.InitProvider.VPCUUID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VPCUUIDRef = rsp.ResolvedReference

	return nil
}
