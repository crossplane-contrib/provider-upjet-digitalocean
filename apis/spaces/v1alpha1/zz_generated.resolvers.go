/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1alpha11 "github.com/crossplane-contrib/provider-upjet-digitalocean/apis/dns/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-upjet-digitalocean/apis/networking/v1alpha1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Cdn.
func (mg *Cdn) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CertificateName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CertificateNameRef,
		Selector:     mg.Spec.ForProvider.Name,
		To: reference.To{
			List:    &v1alpha1.CertificateList{},
			Managed: &v1alpha1.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CertificateName")
	}
	mg.Spec.ForProvider.CertificateName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CertificateNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomDomain),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomDomainRef,
		Selector:     mg.Spec.ForProvider.ID,
		To: reference.To{
			List:    &v1alpha11.DomainList{},
			Managed: &v1alpha11.Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomDomain")
	}
	mg.Spec.ForProvider.CustomDomain = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomDomainRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Origin),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.OriginRef,
		Selector:     mg.Spec.ForProvider.BucketDomainName,
		To: reference.To{
			List:    &BucketList{},
			Managed: &Bucket{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Origin")
	}
	mg.Spec.ForProvider.Origin = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.OriginRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CertificateName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CertificateNameRef,
		Selector:     mg.Spec.InitProvider.Name,
		To: reference.To{
			List:    &v1alpha1.CertificateList{},
			Managed: &v1alpha1.Certificate{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CertificateName")
	}
	mg.Spec.InitProvider.CertificateName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CertificateNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CustomDomain),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CustomDomainRef,
		Selector:     mg.Spec.InitProvider.ID,
		To: reference.To{
			List:    &v1alpha11.DomainList{},
			Managed: &v1alpha11.Domain{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CustomDomain")
	}
	mg.Spec.InitProvider.CustomDomain = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CustomDomainRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Origin),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.OriginRef,
		Selector:     mg.Spec.InitProvider.BucketDomainName,
		To: reference.To{
			List:    &BucketList{},
			Managed: &Bucket{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Origin")
	}
	mg.Spec.InitProvider.Origin = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.OriginRef = rsp.ResolvedReference

	return nil
}
