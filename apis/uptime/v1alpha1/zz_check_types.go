// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CheckInitParameters struct {

	// A boolean value indicating whether the check is enabled/disabled.
	// A boolean value indicating whether the check is enabled/disabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A human-friendly display name for the check.
	// A human-friendly display name for the check.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array containing the selected regions to perform healthchecks from: "us_east", "us_west", "eu_west", "se_asia"
	// An array containing the selected regions to perform healthchecks from.
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// The endpoint to perform healthchecks on.
	// The endpoint to perform healthchecks on.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The type of health check to perform: 'ping' 'http' 'https'.
	// The type of health check to perform. Enum: 'ping' 'http' 'https'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CheckObservation struct {

	// A boolean value indicating whether the check is enabled/disabled.
	// A boolean value indicating whether the check is enabled/disabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The id of the check.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A human-friendly display name for the check.
	// A human-friendly display name for the check.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array containing the selected regions to perform healthchecks from: "us_east", "us_west", "eu_west", "se_asia"
	// An array containing the selected regions to perform healthchecks from.
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// The endpoint to perform healthchecks on.
	// The endpoint to perform healthchecks on.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The type of health check to perform: 'ping' 'http' 'https'.
	// The type of health check to perform. Enum: 'ping' 'http' 'https'
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CheckParameters struct {

	// A boolean value indicating whether the check is enabled/disabled.
	// A boolean value indicating whether the check is enabled/disabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// A human-friendly display name for the check.
	// A human-friendly display name for the check.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// An array containing the selected regions to perform healthchecks from: "us_east", "us_west", "eu_west", "se_asia"
	// An array containing the selected regions to perform healthchecks from.
	// +kubebuilder:validation:Optional
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// The endpoint to perform healthchecks on.
	// The endpoint to perform healthchecks on.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// The type of health check to perform: 'ping' 'http' 'https'.
	// The type of health check to perform. Enum: 'ping' 'http' 'https'
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// CheckSpec defines the desired state of Check
type CheckSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CheckParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CheckInitParameters `json:"initProvider,omitempty"`
}

// CheckStatus defines the observed state of Check.
type CheckStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CheckObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Check is the Schema for the Checks API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type Check struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.target) || (has(self.initProvider) && has(self.initProvider.target))",message="spec.forProvider.target is a required parameter"
	Spec   CheckSpec   `json:"spec"`
	Status CheckStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CheckList contains a list of Checks
type CheckList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Check `json:"items"`
}

// Repository type metadata.
var (
	Check_Kind             = "Check"
	Check_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Check_Kind}.String()
	Check_KindAPIVersion   = Check_Kind + "." + CRDGroupVersion.String()
	Check_GroupVersionKind = CRDGroupVersion.WithKind(Check_Kind)
)

func init() {
	SchemeBuilder.Register(&Check{}, &CheckList{})
}
