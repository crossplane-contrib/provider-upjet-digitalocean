/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCInitParameters struct {

	// A free-form text field up to a limit of 255 characters to describe the VPC.
	// A free-form description for the VPC
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than /16 or smaller than /24.
	// The range of IP addresses for the VPC in CIDR notation
	IPRange *string `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	// A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
	// The name of the VPC
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The DigitalOcean region slug for the VPC's location.
	// DigitalOcean region slug for the VPC's location
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type VPCObservation struct {

	// The date and time of when the VPC was created.
	// The date and time of when the VPC was created
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// A boolean indicating whether or not the VPC is the default one for the region.
	// Whether or not the VPC is the default one for the region
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// A free-form text field up to a limit of 255 characters to describe the VPC.
	// A free-form description for the VPC
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The unique identifier for the VPC.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than /16 or smaller than /24.
	// The range of IP addresses for the VPC in CIDR notation
	IPRange *string `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	// A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
	// The name of the VPC
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The DigitalOcean region slug for the VPC's location.
	// DigitalOcean region slug for the VPC's location
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The uniform resource name (URN) for the VPC.
	// The uniform resource name (URN) for the VPC
	Urn *string `json:"urn,omitempty" tf:"urn,omitempty"`
}

type VPCParameters struct {

	// A free-form text field up to a limit of 255 characters to describe the VPC.
	// A free-form description for the VPC
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than /16 or smaller than /24.
	// The range of IP addresses for the VPC in CIDR notation
	// +kubebuilder:validation:Optional
	IPRange *string `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	// A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
	// The name of the VPC
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The DigitalOcean region slug for the VPC's location.
	// DigitalOcean region slug for the VPC's location
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// VPCSpec defines the desired state of VPC
type VPCSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCInitParameters `json:"initProvider,omitempty"`
}

// VPCStatus defines the observed state of VPC.
type VPCStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPC is the Schema for the VPCs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,do}
type VPC struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	Spec   VPCSpec   `json:"spec"`
	Status VPCStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCList contains a list of VPCs
type VPCList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPC `json:"items"`
}

// Repository type metadata.
var (
	VPC_Kind             = "VPC"
	VPC_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPC_Kind}.String()
	VPC_KindAPIVersion   = VPC_Kind + "." + CRDGroupVersion.String()
	VPC_GroupVersionKind = CRDGroupVersion.WithKind(VPC_Kind)
)

func init() {
	SchemeBuilder.Register(&VPC{}, &VPCList{})
}
